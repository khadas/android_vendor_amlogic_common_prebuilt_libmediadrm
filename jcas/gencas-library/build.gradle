apply plugin: 'com.android.library'

ext {
    genJarDir = gradle.ext.outputDir
}

android {
    compileSdk rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion
    //compileSdk 34

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        //targetSdkVersion 34
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    //api project(':jcas-base-library')
    //api project(':jcas-library')
    //api project(path: ':jcas-vendor-library:widevine')
    //api project(path: ':jcas-vendor-library:nagra')
    //api project(path: ':jcas-vendor-library:sample')
    api fileTree(include: ['*.jar'], dir: 'libs')
}

task clearJar(type: Delete) {
    delete "../out/" + JCasBuilderJarName + ".jar"
}

// make jcas-builder-library.jar
task makeJar(type: Jar) {
    archivesBaseName = JCasBuilderJarName
    from(project.zipTree('build/intermediates/aar_main_jar/debug/classes.jar'))
    from(project.zipTree("${gradle.ext.outputDir}/${JCasBaseJarName}.jar"))
    from(project.zipTree("${gradle.ext.outputDir}/${JCasJarName}.jar"))
    from(project.zipTree("${gradle.ext.outputDir}/${JCasWidevineJarName}.jar"))
    getDestinationDirectory().set(getProject().file(genJarDir))

    //from "build/intermediates/aar_main_jar/debug/"
    //into '../out'

    //include 'classes.jar'
    //rename ('classes.jar', JCasBuilderJarName + ".jar")
}

task releaseJar(type: Jar) {
    archivesBaseName = JCasBuilderJarName
    from(project.zipTree('build/intermediates/aar_main_jar/release/classes.jar'))
    from(project.zipTree("${gradle.ext.outputDir}/${JCasBaseJarName}.jar"))
    from(project.zipTree("${gradle.ext.outputDir}/${JCasJarName}.jar"))
    from(project.zipTree("${gradle.ext.outputDir}/${JCasWidevineJarName}.jar"))
    getDestinationDirectory().set(getProject().file(genJarDir))

    //from "build/intermediates/aar_main_jar/release/"
    //into '../out'

    //include 'classes.jar'
    //rename ('classes.jar', JCasBuilderJarName + ".jar")
}

makeJar.dependsOn(clearJar, build)

releaseJar.dependsOn(clearJar, build)